Class@@EnhancedPatternLayoutTestCase setUp tearDown root.getLoggerRepository() configure PropertyConfigurator fileName compare test1 configure "input/pattern/enhancedPatternLayout1.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.1") test2 configure "input/pattern/enhancedPatternLayout2.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.2") test3 configure "input/pattern/enhancedPatternLayout3.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.3") test4 configure "input/pattern/enhancedPatternLayout4.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.4") test5 configure "input/pattern/enhancedPatternLayout5.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.5") test6 configure "input/pattern/enhancedPatternLayout6.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.6") test7 configure "input/pattern/enhancedPatternLayout7.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.7") test8 configure "input/pattern/enhancedPatternLayout8.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.8") test9 configure "input/pattern/enhancedPatternLayout9.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.9") test10 configure "input/pattern/enhancedPatternLayout10.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.10") test11 configure "input/pattern/enhancedPatternLayout11.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.11") test12 configure "input/pattern/enhancedPatternLayout12.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.12") test13 configure "input/pattern/enhancedPatternLayout13.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.13") test14 configure "input/pattern/enhancedPatternLayout14.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.14") clearMDC context testMDC1 configure "input/pattern/enhancedPatternLayout.mdc.1.properties" clearMDC MDC "key1" "va11" MDC "key2" "va12" logger "Hello World" MDC "key1" MDC "key2" Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1") test15 configure "input/pattern/enhancedPatternLayout15.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.15") test16 configure "input/pattern/enhancedPatternLayout16.properties" common reader chars 0 chars.length reader format TimeZone.getTimeZone("GMT+0") assertTrue utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000 format TimeZone.getTimeZone("GMT-6") assertFalse cstStr.equals(utcStr) assertTrue cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000 common logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger Level.FATAL "Message "+++i e testMDC2 root appender root Level.DEBUG clearMDC root "starting mdc pattern test" layout mdcMsgPattern1 layout root "empty mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "empty mdc, key1 in pattern" layout mdcMsgPattern3 layout root "empty mdc, key2 in pattern" layout mdcMsgPattern4 layout root "empty mdc, key3 in pattern" layout mdcMsgPattern5 layout root "empty mdc, key1, key2, and key3 in pattern" MDC "key1" "value1" MDC "key2" "value2" layout mdcMsgPattern1 layout root "filled mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "filled mdc, key1 in pattern" layout mdcMsgPattern3 layout root "filled mdc, key2 in pattern" layout mdcMsgPattern4 layout root "filled mdc, key3 in pattern" layout mdcMsgPattern5 layout root "filled mdc, key1, key2, and key3 in pattern" MDC "key1" MDC "key2" layout "%m%n" layout root "finished mdc pattern test" Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE) testThrowable root appender root Level.DEBUG root "starting throwable pattern test" root "plain pattern, no exception" root "plain pattern, with exception" ex layout "%m%n%throwable" layout root "%throwable, no exception" root "%throwable, with exception" ex layout "%m%n%throwable{short}" layout root "%throwable{short}, no exception" root "%throwable{short}, with exception" ex layout "%m%n%throwable{none}" layout root "%throwable{none}, no exception" root "%throwable{none}, with exception" ex layout "%m%n%throwable{0}" layout root "%throwable{0}, no exception" root "%throwable{0}, with exception" ex layout "%m%n%throwable{1}" layout root "%throwable{1}, no exception" root "%throwable{1}, with exception" ex layout "%m%n%throwable{100}" layout root "%throwable{100}, no exception" root "%throwable{100}, with exception" ex layout "%m%n%throwable{"+(2-trace.length)+"}" layout root "%throwable{-n}, no exception" root "%throwable{-n}, with exception" ex Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE)

Class@@EnhancedPatternLayoutTestCase setUp tearDown root.getLoggerRepository() configure PropertyConfigurator fileName compare test1 configure "input/pattern/enhancedPatternLayout1.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.1") test2 configure "input/pattern/enhancedPatternLayout2.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.2") test3 configure "input/pattern/enhancedPatternLayout3.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.3") test4 configure "input/pattern/enhancedPatternLayout4.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.4") test5 configure "input/pattern/enhancedPatternLayout5.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.5") test6 configure "input/pattern/enhancedPatternLayout6.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.6") test7 configure "input/pattern/enhancedPatternLayout7.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.7") test8 configure "input/pattern/enhancedPatternLayout8.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.8") test9 configure "input/pattern/enhancedPatternLayout9.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.9") test10 configure "input/pattern/enhancedPatternLayout10.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.10") test11 configure "input/pattern/enhancedPatternLayout11.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.11") test12 configure "input/pattern/enhancedPatternLayout12.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.12") test13 configure "input/pattern/enhancedPatternLayout13.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.13") test14 configure "input/pattern/enhancedPatternLayout14.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.14") clearMDC context testMDC1 configure "input/pattern/enhancedPatternLayout.mdc.1.properties" clearMDC MDC "key1" "va11" MDC "key2" "va12" logger "Hello World" MDC "key1" MDC "key2" Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1") test15 configure "input/pattern/enhancedPatternLayout15.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.15") test16 configure "input/pattern/enhancedPatternLayout16.properties" common reader chars 0 chars.length reader format TimeZone.getTimeZone("GMT+0") assertTrue utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000 format TimeZone.getTimeZone("GMT-6") assertFalse cstStr.equals(utcStr) assertTrue cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000 common logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger Level.FATAL "Message "+++i e testMDC2 root appender root Level.DEBUG clearMDC root "starting mdc pattern test" layout mdcMsgPattern1 layout root "empty mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "empty mdc, key1 in pattern" layout mdcMsgPattern3 layout root "empty mdc, key2 in pattern" layout mdcMsgPattern4 layout root "empty mdc, key3 in pattern" layout mdcMsgPattern5 layout root "empty mdc, key1, key2, and key3 in pattern" MDC "key1" "value1" MDC "key2" "value2" layout mdcMsgPattern1 layout root "filled mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "filled mdc, key1 in pattern" layout mdcMsgPattern3 layout root "filled mdc, key2 in pattern" layout mdcMsgPattern4 layout root "filled mdc, key3 in pattern" layout mdcMsgPattern5 layout root "filled mdc, key1, key2, and key3 in pattern" MDC "key1" MDC "key2" layout "%m%n" layout root "finished mdc pattern test" Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE) testThrowable root appender root Level.DEBUG root "starting throwable pattern test" root "plain pattern, no exception" root "plain pattern, with exception" ex layout "%m%n%throwable" layout root "%throwable, no exception" root "%throwable, with exception" ex layout "%m%n%throwable{short}" layout root "%throwable{short}, no exception" root "%throwable{short}, with exception" ex layout "%m%n%throwable{none}" layout root "%throwable{none}, no exception" root "%throwable{none}, with exception" ex layout "%m%n%throwable{0}" layout root "%throwable{0}, no exception" root "%throwable{0}, with exception" ex layout "%m%n%throwable{1}" layout root "%throwable{1}, no exception" root "%throwable{1}, with exception" ex layout "%m%n%throwable{100}" layout root "%throwable{100}, no exception" root "%throwable{100}, with exception" ex layout "%m%n%throwable{"+(2-trace.length)+"}" layout root "%throwable{-n}, no exception" root "%throwable{-n}, with exception" ex Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE)

Class@@TestLogMF getTraceLevel tearDown LogManager testClassName appender Logger.getRootLogger() appender LogMF logger null Math.PI assertEquals TestLogMF.class.getName() writer.toString() testTraceNullPattern logger TRACE LogMF logger null Math.PI assertNull capture.getMessage() testTraceNoArg logger TRACE LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testTraceBadPattern logger TRACE LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testTraceMissingArg logger TRACE LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testTraceString logger TRACE LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testTraceNull logger TRACE LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testTraceInt logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceByte logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceShort logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceLong logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceChar logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testTraceBoolean logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testTraceFloat logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceDouble logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceTwoArg logger TRACE LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testTraceThreeArg logger TRACE LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testTraceFourArg logger TRACE LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testTraceArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testTraceNullArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugNullPattern LogMF logger null Math.PI assertEquals null capture.getMessage() testDebugNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testDebugBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testDebugMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testDebugString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testDebugNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testDebugInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testDebugBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testDebugFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testDebugDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testDebugTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testDebugThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testDebugFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testDebugArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testDebugDate LogMF logger "Iteration {0}" epoch assertEquals expected actual assertEquals expected2 actual testDebugNullArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugPercent LogMF logger "{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugFullPrecisionAndPercent LogMF logger "{0}{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugQuoted LogMF logger "'{0}'" "World" assertEquals "{0}" capture.getMessage() testInfoNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testInfoNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testInfoBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testInfoMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testInfoString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testInfoNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testInfoInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testInfoBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testInfoFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testInfoDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testInfoTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testInfoThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testInfoFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testInfoArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testWarnNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testWarnNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testWarnBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testWarnMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testWarnString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testWarnNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testWarnInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testWarnBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testWarnFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testWarnDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testWarnTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testWarnThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testWarnFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testWarnArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogNullPattern LogMF logger Level.ERROR null Math.PI assertNull capture.getMessage() testLogNoArg LogMF logger Level.ERROR "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testLogBadPattern LogMF logger Level.ERROR "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testLogMissingArg LogMF logger Level.ERROR "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogString LogMF logger Level.ERROR "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testLogNull LogMF logger Level.ERROR "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testLogInt LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogByte LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogShort LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogLong LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogChar LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testLogBoolean LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testLogFloat LogMF logger Level.ERROR "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testLogDouble LogMF logger Level.ERROR "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testLogTwoArg LogMF logger Level.ERROR "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogThreeArg LogMF logger Level.ERROR "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogFourArg LogMF logger Level.ERROR "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogArrayArg LogMF logger Level.ERROR "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogrbNullBundle LogMF logger Level.ERROR null "Iteration0" Math.PI assertEquals "Iteration0" capture.getMessage() testLogrbNullKey LogMF logger Level.ERROR BUNDLE_NAME null Math.PI assertNull capture.getMessage() testLogrbNoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello1" Math.PI assertEquals "Hello, World" capture.getMessage() testLogrbBadPattern LogMF logger Level.ERROR BUNDLE_NAME "Malformed" Math.PI assertEquals "Hello, {." capture.getMessage() testLogrbMissingArg LogMF logger Level.ERROR BUNDLE_NAME "Hello2" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogrbString LogMF logger Level.ERROR BUNDLE_NAME "Hello3" "World" assertEquals "Hello, World" capture.getMessage() testLogrbNull LogMF logger Level.ERROR BUNDLE_NAME "Hello3" (Object)null assertEquals "Hello, null" capture.getMessage() testLogrbInt LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbByte LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbShort LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbLong LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbChar LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration C" capture.getMessage() testLogrbBoolean LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration true" capture.getMessage() testLogrbFloat LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" (float)Math.PI assertEquals expected capture.getMessage() testLogrbDouble LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" Math.PI assertEquals expected capture.getMessage() testLogrbTwoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello4" "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogrbThreeArg LogMF logger Level.ERROR BUNDLE_NAME "Hello5" "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogrbFourArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogrbArrayArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" args assertEquals "Hello, World." capture.getMessage() testInfo1ParamBrace9 LogMF logger "Hello, {9}{0}" "World" assertEquals "Hello, {9}World" capture.getMessage() testInfo2ParamBrace9 LogMF logger "{1}, {9}{0}" "World" "Hello" assertEquals "Hello, {9}World" capture.getMessage() testInfo10ParamBrace9 LogMF logger "{1}, {9}{0}" newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "} assertEquals "Hello, New World" capture.getMessage() testInfo1ParamBraceSlashColon LogMF logger pattern "World" assertEquals pattern capture.getMessage()

Class@@TestLogMF getTraceLevel tearDown LogManager testClassName appender Logger.getRootLogger() appender LogMF logger null Math.PI assertEquals TestLogMF.class.getName() writer.toString() testTraceNullPattern logger TRACE LogMF logger null Math.PI assertNull capture.getMessage() testTraceNoArg logger TRACE LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testTraceBadPattern logger TRACE LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testTraceMissingArg logger TRACE LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testTraceString logger TRACE LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testTraceNull logger TRACE LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testTraceInt logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceByte logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceShort logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceLong logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceChar logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testTraceBoolean logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testTraceFloat logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceDouble logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceTwoArg logger TRACE LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testTraceThreeArg logger TRACE LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testTraceFourArg logger TRACE LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testTraceArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testTraceNullArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugNullPattern LogMF logger null Math.PI assertEquals null capture.getMessage() testDebugNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testDebugBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testDebugMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testDebugString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testDebugNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testDebugInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testDebugBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testDebugFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testDebugDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testDebugTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testDebugThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testDebugFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testDebugArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testDebugDate LogMF logger "Iteration {0}" epoch assertEquals expected actual assertEquals expected2 actual testDebugNullArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugPercent LogMF logger "{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugFullPrecisionAndPercent LogMF logger "{0}{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugQuoted LogMF logger "'{0}'" "World" assertEquals "{0}" capture.getMessage() testInfoNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testInfoNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testInfoBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testInfoMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testInfoString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testInfoNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testInfoInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testInfoBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testInfoFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testInfoDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testInfoTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testInfoThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testInfoFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testInfoArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testWarnNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testWarnNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testWarnBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testWarnMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testWarnString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testWarnNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testWarnInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testWarnBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testWarnFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testWarnDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testWarnTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testWarnThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testWarnFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testWarnArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogNullPattern LogMF logger Level.ERROR null Math.PI assertNull capture.getMessage() testLogNoArg LogMF logger Level.ERROR "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testLogBadPattern LogMF logger Level.ERROR "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testLogMissingArg LogMF logger Level.ERROR "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogString LogMF logger Level.ERROR "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testLogNull LogMF logger Level.ERROR "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testLogInt LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogByte LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogShort LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogLong LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogChar LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testLogBoolean LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testLogFloat LogMF logger Level.ERROR "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testLogDouble LogMF logger Level.ERROR "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testLogTwoArg LogMF logger Level.ERROR "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogThreeArg LogMF logger Level.ERROR "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogFourArg LogMF logger Level.ERROR "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogArrayArg LogMF logger Level.ERROR "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogrbNullBundle LogMF logger Level.ERROR null "Iteration0" Math.PI assertEquals "Iteration0" capture.getMessage() testLogrbNullKey LogMF logger Level.ERROR BUNDLE_NAME null Math.PI assertNull capture.getMessage() testLogrbNoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello1" Math.PI assertEquals "Hello, World" capture.getMessage() testLogrbBadPattern LogMF logger Level.ERROR BUNDLE_NAME "Malformed" Math.PI assertEquals "Hello, {." capture.getMessage() testLogrbMissingArg LogMF logger Level.ERROR BUNDLE_NAME "Hello2" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogrbString LogMF logger Level.ERROR BUNDLE_NAME "Hello3" "World" assertEquals "Hello, World" capture.getMessage() testLogrbNull LogMF logger Level.ERROR BUNDLE_NAME "Hello3" (Object)null assertEquals "Hello, null" capture.getMessage() testLogrbInt LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbByte LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbShort LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbLong LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbChar LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration C" capture.getMessage() testLogrbBoolean LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration true" capture.getMessage() testLogrbFloat LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" (float)Math.PI assertEquals expected capture.getMessage() testLogrbDouble LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" Math.PI assertEquals expected capture.getMessage() testLogrbTwoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello4" "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogrbThreeArg LogMF logger Level.ERROR BUNDLE_NAME "Hello5" "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogrbFourArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogrbArrayArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" args assertEquals "Hello, World." capture.getMessage() testInfo1ParamBrace9 LogMF logger "Hello, {9}{0}" "World" assertEquals "Hello, {9}World" capture.getMessage() testInfo2ParamBrace9 LogMF logger "{1}, {9}{0}" "World" "Hello" assertEquals "Hello, {9}World" capture.getMessage() testInfo10ParamBrace9 LogMF logger "{1}, {9}{0}" newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "} assertEquals "Hello, New World" capture.getMessage() testInfo1ParamBraceSlashColon LogMF logger pattern "World" assertEquals pattern capture.getMessage()
